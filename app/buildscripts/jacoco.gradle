apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/reports")
}

task jacocoTestReport(type: JacocoReport, dependsOn: ["createDebugCoverageReport", "testDebugUnitTest"]) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*',
            '**/view/**/*.*',
            '**/factory/**/*.*',
            '**/model/**/*.*',
            'com.example.workshoptest.model/UserResponse.kt'
    ]

    def debugTree = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )


    def mainSrc = files([
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ])

    // generated classes
    classDirectories = files([debugTree])

    // sources
    sourceDirectories = files([mainSrc])
    //executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")

      executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}




